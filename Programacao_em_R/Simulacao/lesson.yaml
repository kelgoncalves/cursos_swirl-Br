- Class: meta
  Course: Programação em R
  Lesson: Simulação
  Author: Nick Carchedi, Sheyla Trefflich (tradução)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: Um das grandes vantagens de utilizar uma linguagem de programação estatística como R é o fato dela ter uma vasta quantidade de ferramentas de simulação de números aleatórios.

- Class: text
  Output: Nessa lição assumimos familiaridade com algumas poucas distribuições de probabilidade, mas esses tópicos apenas serão discutidos com respeito a geração de números aleatórios. Mesmo que você não tenha experiência prévia com esses conceitos, você deverá ser capaz de completar essa lição e entender as idéias principais. 

- Class: cmd_question
  Output: A primeira função que nós usaremos para gerar números aleatórios é sample(). Use ?sample para conhecer a documentação.
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: Use '?sample' para conhecer a documentação da função sample().

- Class: cmd_question
  Output: "Vamos simular o rolamento de quatro dados de seis lados: sample(1:6, 4, replace = TRUE)."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Digite sample(1:6, 4, replace = TRUE) para simular o rolamento de quatro dados de seis lados.

- Class: cmd_question
  Output: Agora repita o comando para ver o quanto seus resultados diferem.(A probabilidade de de rolar os dados e obster exatamente o mesmo resultado é (1/6)^4 = 0.00077, que é uma probabilidade muito baixa!)
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Digite sample(1:6, 4, replace = TRUE) para simular a rolagem de quatro dados com seis lados novamente.

- Class: text
  Output: sample(1:6, 4, replace = TRUE) orienta o R para selecionar aleatoriamente quatro números entre 1 e 6, com reposição. Amostragem com reposição simplesmente significa que cada número é "devolvido" depois de ser selecionado, então cada número pode aparecer mais de uma vez. É isso que nós queremos aqui, desde que você role um dado de maneira que não devendo afetar a rolagem de nenhum outro dado.

- Class: cmd_question
  Output: Agora amostre 10 números entre 1 e 20, SEM reposição. Para amostrar sem reposição, simplesmente deixe desativado o argumento 'replace'.
  CorrectAnswer: sample(1:20, 10)
  AnswerTests: match_call('sample(1:20, 10)')
  Hint: Digite sample(1:20, 10) para amostrar 10 números entre 1 e 20, sem reposição.

- Class: text
  Output: Desde que o último comando tenha sido amostrado sem reposição, nenhum número aparecerá mais do que uma vez no resultado. 

- Class: cmd_question
  Output: LETTERS é uma variável predefinidade em R que contem um vetor com todas as 26 do alfabeto inglês. Confira agora.
  CorrectAnswer: LETTERS
  AnswerTests: omnitest(correctExpr='LETTERS')
  Hint: Digite LETTERS para mostrar o seu conteúdo no console.

- Class: cmd_question
  Output: A função sample() também pode ser utilizada para permutar, ou rearranjar os elementos do vetor. Por exemplo, tente sample(LETTERS) para permutar todas as 26 letras do alfabeto em inglês.
  CorrectAnswer: sample(LETTERS)
  AnswerTests: omnitest(correctExpr='sample(LETTERS)')
  Hint: Digite sample(LETTERS) para permutar todas as 26 letters do alfabeto inglês.

- Class: text
  Output: Isso é identico a chamar uma amostragem com 26 LETTERS, sem reposição.  Quando o argumento 'size' para sample () não é especificado, o R leva uma amostra de tamanho igual ao vetor a partir do qual você está amostrando.


- Class: text
  Output: Agora, suponhamos que queremos simular 100 voltas de uma moeda não honesta. Essa moeda particular tem 0.3 de probabilidade de cair em 'cara' e 0.7 de probabilidade de cair em 'coroa'. 

- Class: cmd_question
  Output: Vamos representar os valores de cara por 0 e os valores de coroa por 1. Use sample() para uma amostragem de tamanho 100 a partir do vetor c(0,1), com reposição. Desde que a moeda seja 'não honesta', nós deveremos atribuir probabilidades específicas para os valores 0 (cara) e 1 (coroa) com um quarto argumento, prob = c(0.3, 0.7). Atribua o resultado a uma nova variáevel chamada voltas.
  CorrectAnswer: voltas <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  AnswerTests: match_call('voltas <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))')
  Hint: 'O sehuinte comando irá produzir 100 voltas de uma moeda 'não honesta' e atribuir o resultado dessa maneira: voltas<- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

- Class: cmd_question
  Output: Veja o conteúdo da variável voltas.
  CorrectAnswer: voltas
  AnswerTests: omnitest(correctExpr='voltas')
  Hint: É só digitar voltas para visulaizar o conteúdo.

- Class: cmd_question
  Output: Desde que nós determinamos a probabilidade de 0.7 de sair cara, nós esperamos que aproximadamente 70 giros da nossa moeda tenha valor 1. Conte o número atual de 1s contidos em voltas usando a função sum().
  CorrectAnswer: sum(voltas)
  AnswerTests: omnitest(correctExpr='sum(voltas)')
  Hint: sum(voltas) irá retornar a soma de quantos 0s e 1s, dando o número total de 1s em voltas.

- Class: cmd_question
  Output: Um volta de uma moeda é um resultado binário (0 ou 1) e estamos realizando 100 testes independentes (voltas de moeda), então podemos usar o rbinom() para simular uma variável aleatória. Leia a documentação para rbinorm() usando ?rbinom.
  CorrectAnswer: ?rbinom
  AnswerTests: omnitest(correctExpr='?rbinom')
  Hint: Digite ?rbinom para ver o arquivo de help de rbinom().

- Class: text
  Output: Cada probabilidade de distribuição em R tem uma função r*** (para "random"), a função d*** (para "densidade"), a função p*** (para "probabilidade"), e q*** (para "quantil"). Nós estamos muito interessados em funções r*** nessa lição, mas eu encorajo você a também explorar os demais quando puder.

- Class: cmd_question
  Output: Uma variável aleatória binomial representa um número de 'sucessos' (coroas) em um dado número de 'tentativas' (voltas da moeda). Senda assim, nós podemos gerar uma única variável aleatória que representa o número de 'sucessos' (coroas) em 100 voltas da nossa moeda 'não-honesta' usando rbinorm(1, size = 100, prob = 0.7). Note que a sua probabilidade só é específica aos 'sucessos' em coroas e NÃO à probabilidade de 'falha' em caras. Tente isso agora.
  CorrectAnswer: rbinom(1, size = 100, prob = 0.7)
  AnswerTests: match_call('rbinom(1, size = 100, prob = 0.7)')
  Hint: Chame rbinom() com n = 1, size = 100, e prob = 0.7.

- Class: cmd_question
  Output: De maneira equivalente, se nós queremos ver todos os 0s e 1s, nós podemos requisitar 100 observações, cada uma com tamanho 1, com probabilidade de sucesso de 0.7. Tente isso, atribuindo o resultados a uma nova variável chamada voltas2
  CorrectAnswer: voltas2 <- rbinom(100, size = 1, prob = 0.7)
  AnswerTests: match_call('voltas2 <- rbinom(100, size = 1, prob = 0.7)')
  Hint: Chame rbinom() com n = 100, size = 1, e prob = 0.7 e atribua o resultado a voltas2.

- Class: cmd_question
  Output: Veja o conteúdo de voltas2.
  CorrectAnswer: voltas2
  AnswerTests: omnitest('voltas2')
  Hint: Digite voltas2 para ver seu conteúdo.

- Class: cmd_question
  Output: Agora utilize sum() para contar o número de 1s (coroas) em voltas2. o valor deve estar próximo a 70!
  CorrectAnswer: sum(voltas2)
  AnswerTests: omnitest('sum(voltas2)')
  Hint: Use sum(voltas2) para contar o número de 1s.

- Class: cmd_question
  Output: Similar a rbinom(), nós podemos usar no R uma simulação de números aleatórios com muitas outras distribuições de probabilidade. Veja a documentação de rnorm() agora.
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest('?rnorm')
  Hint: Digite ?rnorm para ver o arquivo de ajuda.

- Class: cmd_question
  Output: O padrão normal de distribuição tem média 0 e desvio padrão 1. Como você pode ver abaixo na seção de documentão, os valores padrão para os argumentos 'média' e 'sd' (desvio padrão)  de rnorm() são 0 e 1, respectivamente. Portanto, rnorm(10) vai gerar 10 números aleatórios para uma distribuição normal padrão. Tente isso!
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  Hint: Use rnorm(10) para gerar 10 númeroa aleatórios de uma distribuição normal.

- Class: cmd_question
  Output: Agora faça o mesmo, exceto com a média de 100 e o desvio padrão de 25.
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')
  Hint: Use rnorm(10, mean = 100, sd = 25) para gerar 10 números aleatórios de uma distribuição normal com média 100 e desvio padrão de 25.
- Class: text
  Output: Finalmente, se quisermos simular 100  * grupos * de números aleatórios, cada um contendo 5 valores gerados a partir de uma distribuição de Poisson com média de 10? Vamos começar com um grupo de 5 números, então vou mostrar-lhe como repetir a operação 100 vezes de forma conveniente e compacta.

- Class: cmd_question
  Output: Crie 5 valores aleatórios a partir de uma distribuição de Poisson com média 10. Cheque a documentação utilizando rpois() se precisar de ajuda.
  CorrectAnswer: rpois(5, 10)
  AnswerTests: match_call('rpois(5, 10)')
  Hint: Use rpois(5, 10) para gerar 5 números aleatórios a partir de uma distribuição de Poisson com média 10.

- Class: cmd_question
  Output: Agora utilize replicate(100, rpois(5, 10)) para fazer essa operação 100 vezes. Armazene o resultado em uma nova variável chamada minha_distribuiçao.
  CorrectAnswer: minha_distribuiçao <- replicate(100, rpois(5, 10))
  AnswerTests: match_call('minha_distribuiçao <- replicate(100, rpois(5, 10))')
  Hint: minha_distribuiçao <- replicate(100, rpois(5, 10)) vai repetir a operação 100 vezes e armazenar o resultado.

- Class: cmd_question
  Output: Consulte o conteúdo de minha_distribuição.
  CorrectAnswer: minha_distribuiçao
  AnswerTests: omnitest('minha_distribuiçao')
  Hint: Imprima o conteúdo de minha_distribuiçao no console.

- Class: cmd_question
  Output: replicate() cria uma matrix, cada coluna contendo 5 números aleatórios gerados a partir de uma distribuição de Poisson com média de 10. Agora nós podemos encontrar a média de cada coluna em minha_distribuiçao utilizando a função colMeans(). Armazene os resultados na variável chamada cm.
  CorrectAnswer: cm <- colMeans(minha_distribuiçao)
  AnswerTests: omnitest('cm <- colMeans(minha_distribuiçao)')
  Hint: Use cm <- colMeans(minha_distribuiçao) para criar um vetor de colunas médias, armazenando o resultado em cm.

- Class: cmd_question
  Output: E vamos dar uma observada na distribuição das nossas colunas médias plotando um histograma com hist(cm).
  CorrectAnswer: hist(cm)
  AnswerTests: omnitest('hist(cm)')
  Hint: hist(cm) vai retornar um histograma de colunas médias.

- Class: text
  Output: Parece que as nossas colunas médias são quase normalmente distribuidas, certo? Esse é o Teorema do Limite Central no trabalho, mas essa é uma lição para outro dia!

- Class: text
  Output: Todas as probabilidades de distribuição padrão são construidas no R, incluindo exponencial (rexp()), qui-quadrado (rchisq()), gamma (rgamma()), ... Bem, você verá o padrão.

- Class: text
  Output: Simulação é praticamente um campo a parte e estamos vendo apenas uma pequena parte. Sinta-se encorajado a explorar essas e outras funções no futuro por si próprio.
