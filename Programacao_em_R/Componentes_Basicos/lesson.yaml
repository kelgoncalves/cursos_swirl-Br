- Class: meta
  Course: Programação em R
  Lesson: Componentes básicos
  Author: Nick Carchedi, Gustavo Paterno (Tradução), Kelin Gonçalves de Oliveira (Tradução)
  Type: Standard
  Organization: JHU Biostat, Gustavo Paterno
  Version: 2.2.0

- Class: text
  Output: Nesta aula iremos explorar os componentes básicos da linguagem de Programação R.

- Class: text
  Output: 'Se em algum momento da aula você precisar de mais informaçẽs sobre o R, apenas digite help.start() no console ("prompt"). Esse comando irá abrir um menu de recursos (no RStudio ou no seu navegador de internet, dependendo da sua configuração). Por outro lado, uma simples busca na internet geralmente fornece a resposta que você está procurando.'

- Class: cmd_question
  Output: Em sua forma mais simples, o R pode ser utilizado como uma calculadora interativa. Digite 5 + 7 e aperte enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Aperte 5 + 7 e aperte enter.

- Class: text
  Output: 'Por padrão, o R simplesmente retorna o resultado: 12. No entanto, R é uma linguagem de programação. Geralmente utilizamos programação em vez de calculadoras por que queremos automatizar processos ou evitar reptição desnecessária.'
  
- Class: text
  Output: Neste exemplo queremos utilizar o resultado acima em um segundo cálculo. Em vez de repetir 5 + 7 toda vez que for necessário, podemos criar uma variável que armazena o resultado.

- Class: text
  Output: 'Para armazenar um valor em uma variável no R, utilizamos o operador de associação, que é simplesmente um sinal de "menos que" (<) seguido de um sinal de menos (-). Ou seja: "<-".'
  
- Class: text
  Output: Pense no operador de associação como uma flecha. Você está atribuindo o valor do lado direito da flecha ao nome da variável do lado esquerdo da flecha.

- Class: cmd_question
  Output: Para atribuir o resultado de 5 + 7 a uma variável nova chamada x, você digita x <- 5 + 7. Isso pode ser lido como 'x recebe 5 mais 7'. Tente fazer a atribuição do resultado.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Digite x <- 5 + 7. É importante incluir um espaço simples entre cada lado do operador de associação, mas NÃO inclua espaço entre o `<` e o `-` que compõem a flecha.

- Class: text
  Output: 'Você notará que o R não mostrou o resultado 12 desta vez. Quando você utiliza o operador de associação, o R assume que você não deseja visualizar o resultado imediatamente, mas prefere guardar ele na variável para utilizar em outra operação mais tarde.'

- Class: cmd_question
  Output: Para visualizar o conteúdo da variável x, digite x e aperte Enter. Tente agora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Digite x e aperte Enter. Isso irá automaticamente mostrar o valor de x.

- Class: cmd_question
  Output: Agora, guarde o resultado de x - 3 em uma nova variável chamada y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Digite y <- x - 3 e pressione Enter. Se você usa x - 3 ou x-3 é uma preferência pessoal, mas é um bom hábito incluir espaços em cada lado do operador de associação.

- Class: cmd_question
  Output: Qual é o valor de y? Digite y para descobrir.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Digite y e pressione Enter.

- Class: text
  Output: Agora, vamos criar uma pequena coleção de números, chamado de vetor. Qualquer objeto que contém dados é chamado de uma estrutura de dados e os vetores numéricos são o tipo mais simples de estrutura de dados do R. Na verdade, mesmo um número único é considerado um vetor de extensão igual a um elemento.

- Class: cmd_question
  Output: O jeito mais simples de criar um vetor é  com a função c(), que significa 'concatenar' ou 'combinar'. Para criar um vetor contendo os números 1.1, 9, e 3.14, digite c(1.1, 9, 3.14). Tente este comando e guarde o resultado em uma variável chamada z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Ao escrever z <- c(1.1, 9, 3.14) você colocará o vetor (1.1, 9, 3.14) dentro de uma variável nomeada z. Incluir espaços simples depois de cada vírgula não é necessário, mas ajuda a tornar o teu código menos aglomerado e mais didático.

- Class: cmd_question
  Output: Qualquer momento que você tiver dúvidas sobre uma função em particular, você pode acessar os arquivos internos de ajuda do R via o comando `?`. Por exemplo, se você deseja obter mais informações sobre a função c(), digite ?c sem os parênteses que normalmente seguiriam a chamada da função. Tente agora.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Digite ?c e aperte Enter. Isso te trará o arquivo de ajuda para a função c().

- Class: cmd_question
  Output: Digite z para visualizar o conteúdo da variável. Obeserve que não há vírgulas separando os valores.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Digite z e aperte Enter para visualizar o conteúdo da variável.

- Class: cmd_question
  Output: Você pode combinar vetores para criar um novo vetor. Crie um novo vetor que contenha z, 555, e z novamente, nesta ordem. NÃO atribua este vetor a uma variável, para que você possa ver o resultado imediatamente.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Digite c(z, 555, z). NÃO crie uma nova variável. Nós queremos apenas ver o resultado.

- Class: cmd_question
  Output: 'Vetores numéricos podem ser utilizados para expressões aritméticas.Digite o seguinte comando e veja o que acontece: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Coloque z * 2 + 100, sem atribuir o resultado a nenhuma variável. O símbolo `*` é utilizado para multiplicações e compartilha tecla com o número 8 de muitos teclados.

- Class: text
  Output: Por primeiro, o R multiplicou cada um dos três elementos do vetor z por 2. Depois, adicionou 100 a cada elemento a fim de te entregar o resultado mostrado acima.

- Class: text
  Output: Outros operadores aritméticos comuns são `+`, `-`, `/`, e `^` (onde x^2 significa 'x ao quadrado'). Para obter a raíz quadrada, use a função sqrt() e para obter o valor absoluto, utilize a função abs().

- Class: cmd_question
  Output: Obtenha a raíz quadrada de z - 1 e atribua isto a uma nova variável chamada minha_sqrt.
  CorrectAnswer: minha_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='minha_sqrt <- sqrt(z - 1)')
  Hint: Atribua o resultado de sqrt(z - 1) a variável chamada minha_sqrt.

- Class: mult_question
  Output: Antes de vermos o conteúdo da variável minha_sqrt, quantos elementos você acha que ela contém?
  CorrectAnswer: Um vetor de 3 elementos
  AnswerChoices: Um vetor de 3 elementos; Um número único (um vetor de tamanho igual a 1); Um vetor de tamanho 0 (Um vetor vazio)
  AnswerTests: omnitest(correctVal='Um vetor de 3 elementos')
  Hint: 'Pense sobre como que o R trabalhou com as outras operações com vetores: elemento por elemento.'

- Class: cmd_question
  Output: Mostre o conteúdo de minha_sqrt.
  CorrectAnswer: minha_sqrt
  AnswerTests: omnitest(correctExpr='minha_sqrt')
  Hint: Apenas digite minha_sqrt e pressione Enter para visualizar o conteúdo desta variável.

- Class: text
  Output: Como você deve ter previsto, R primeiro subtraiu 1 de cada elemento de z e então fez a raíz quadrada de cada um. Isso te deixou com um vetor do mesmo tamanho que o vetor original z.

- Class: cmd_question
  Output: Agora, crie uma nova variável chamada minha_div que recebe o valor de z dividido por minha_sqrt.
  CorrectAnswer: minha_div <- z / minha_sqrt
  AnswerTests: omnitest(correctExpr='minha_div <- z / minha_sqrt')
  Hint: Coloque minha_div <- z / minha_sqrt. Os espaços em ambos os lados do símbolo `/` não são necessários, mas geralmente melhoram a leitura, por fazerem o código parecer menos aglomerado. Mas isso vai da preferência de cada um.

- Class: mult_question
  Output: Quais destas afirmativas você acha que é verdadeiro?
  CorrectAnswer: O primeiro elemento de minha_div é igual ao primeiro elemento de z dividido pelo primeiro elemento de minha_sqrt, e assim por diante...
  AnswerChoices: O primeiro elemento de minha_div é igual ao primeiro elemento de z dividido pelo primeiro elemento de minha_sqrt, e assim por diante...; minha_div é um número único (um vetor de tamanho 1); minha_div é indefinido
  AnswerTests: omnitest(correctVal='O primeiro elemento de minha_div é igual ao primeiro elemento de z dividido pelo primeiro elemento de minha_sqrt, e assim por diante...')
  Hint: Pense sobre como o R cuida de outras operações vetorizadas como `+` e `*`.

- Class: cmd_question
  Output: Vá em frente e veja o conteúdo de minha_div.
  CorrectAnswer: minha_div
  AnswerTests: omnitest(correctExpr='minha_div')
  Hint: Digite minha_div e pressione Enter para ver o conteúdo.

- Class: text
  Output: Quando há dois vetores do mesmo tamanho, o R faz as operações aritméticas especificadas (`+`, `-`, `*`, etc.) elemento-por-elemento. Se os vetores são de tamanhos diferentes, o R "recicla" o vetor menor até que que este tenha o mesmo tamanho que o vetor maior.

- Class: text
  Output: Quando nós fizemos z * 2 + 100 em um exemplo anterior, z era um vetor de tamanho 3, mas tecnicamente, 2 and 100 são vetores de tamanho 1, cada.

- Class: text
  Output: 'Por trás dos holofotes, R está "reciclando"" o 2 para fazer um vetor de 2s e o 100 para fazer um vetor de 100s. Em outras palavras, quando você pede para o R computar z * 2 + 100, o que ele realmente computa é: z * c(2, 2, 2) + c(100, 100, 100)'
   
- Class: cmd_question
  Output: Para ver outro exemplo de como esta reciclagem de vetores funciona, tente somar c(1, 2, 3, 4) e c(0, 10). Não se preocupe em salvar o resultado em uma nova variável.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Coloque c(1, 2, 3, 4) + c(0, 10) no console para ver como o R soma estes dois vetores de tamanhos diferentes. Não se preocupe em adicionar o resultado em uma nova variável.

- Class: text
  Output: Se o tamanho do vetor menor não é divisível pelo tamanho do vetor maior, R ainda irá reciclar, mas irá emitir um aviso para que você saiba que algo esquisito pode acontecer.

- Class: cmd_question
  Output: Tente c(1, 2, 3, 4) + c(0, 10, 100) por exemplo.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Digite c(1, 2, 3, 4) + c(0, 10, 100) para ver como que o R irá lidar com a soma de dois vetores, sendo que o tamanho do vetor menor não é divisível pelo tamanho do vetor maior. Não se preocupe em atribuir o resultado a uma variável.

- Class: text
  Output: Antes de concluir esta lição, gosteríamos de te mostrar alguns truques que vão te fazer economizar tempo.

- Class: text
  Output: Anteriormente nesta lição, você computou z * 2 + 100. Vamos imaginar que você cometeu um erro e que você queria adicionar 1000 ao invés de 100. Você poderia resolver isso  re-digitando a expressão ou...

- Class: cmd_question
  Output: Em diversos ambientes de programação, a seta para cima te permitirá navegar pelos comandos anteriores que já foram feitos por voce. Pressione a seta para cima até encontrar este comando (z * 2 + 100), e então, mude 100 para 1000 e pressione Enter. Se a tecla da seta não funcionar para você, apenas digite o comando correto.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Se o teu ambiente não te permite navegar com a seta, digite o comando correto para prosseguir.

- Class: text
  Output: Finalmente, vamos imaginar que você quer ver o conteúdo de uma variável que você criou anteriormente, mas você não lembra se a nomeou minha_div ou minhaDiv. Você poderia tentar ambos os nomes e ver qual funciona, ou...

- Class: cmd_question
  Output: Você pode digitar as primeiras duas letras do nome da variável e pressionar a tecla Tab. A maioria dos ambientes de programação fornecerão uma lista de variáveis que você criou que começam com minha. Chamamos isso de 'auto-completar' e pode ser bastante útil quando você tem diversas variáveis no seu ambiente. Tente utilizar o Tab para auto-completar. (Se não funcionar para você, digite minha_div e pressione Enter.)
  CorrectAnswer: minha_div
  AnswerTests: omnitest(correctExpr='minha_div')
  Hint: Se o teu ambiente não te permite auto-completar, digite minha_div e aperte Enter para prosseguir.
