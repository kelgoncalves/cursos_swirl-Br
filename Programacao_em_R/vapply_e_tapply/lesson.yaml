- Class: meta
  Course: Programacao em R
  Lesson: vapply e tapply
  Author: Nick Carchedi, Clarice Groeneveld (tradução)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: "Na última lição, você aprendeu sobre os dois membros fundamentais da família *apply de funções do R: lapply() e sapply(). Ambas recebem listas como entrada, aplicam uma função a cada elemento da lista, então combinam e retornam o resultado. lapply() sempre retorna uma lista, enquanto sapply() tenta simplificar o resultado."

- Class: text
  Output: Nessa lição, você aprenderá a usar vapply() e tapply(), cada servindo um propósito bem específico dentro da metodologia Dividr-Aplicar-Combinar. Para manter a consistência, vamos usar o mesmo dataset que usamos nas lição 'lapply e sapply'.

- Class: text
  Output: O dataset Flags (bandeiras) do resositório UCI Machine Learning contém detalhes de várias nações e suas bandeiras. Mais informações podem ser vistas aqui -  http://archive.ics.uci.edu/ml/datasets/Flags

- Class: text
  Output: Eu armazenei os dados em uma variável chamada bandeiras. Se já faz um tempo que você completou a lição ‘lapply e sapply’, você pode querer reavaliar os dados usando funções como dim(), head(), str() e summary() quando estiver no promp (>). Você pode também digitar viewinfo() no promp para abrir documentação sobre o dataset. Vamos começar!

- Class: cmd_question
  Output: Como você viu na última lição, a função unique() retorna um vetor com os valores únicos contidos no objeto passado a ele. Portanto, sapply(bandeiras, unique) retorna uma lista contendo um vetor de valores únicos para cada coluna do dataset bandeiras. Teste isso de novo agora.

  CorrectAnswer: sapply(bandeiras, unique)
  AnswerTests: omnitest(correctExpr='sapply(bandeiras, unique)')
  Hint: Use sapply(bandeiras, unique) para retornar uma lista  contendo um vetor de valores únicos para cada coluna do dataset bandeiras.

- Class: text
  Output: E se você tivesse esquecido como unique() funciona e tivesse pensando que ele retorna o *número* de valores únicos contidos no objeto passado a ele? Então você teria esperado incorretamente que sapply() bandeiras retornasse um vetor numérico, já que cada elemento da lista retornado conteria um único número e sapply() então poderia simplificar o resultado em um vetor.

- Class: text
  Output: "Quando trabalhamos interativamente (no promp), isso não é um problema tão grave, já que vemos o resultado imediatamente e rapidamente reconhecemos nossos erros. Porém, quando trabalhamos não-interativamente (ex.: escrevendo nossas próprias funções), um mal entendido pode passar despercebido e causar resultados incorretos mais tarde. Portanto, você pode querer ser mais cuidadoso e nesses casos vapply() é útil."

- Class: text
  Output: Enquanto sapply() tenta ‘adivinhar’ o formato correto do resultado, vapply() permite que você especifique ele explicitamente. Se o resultado não corresponder ao formato que você especificou, vapply() vai retornar um erro, fazendo com que a operação pare. Isso pode previnir problemas significativos no seu código que podem ser causados por resultados inesperados retornados por sapply().

- Class: cmd_question
  Output: Teste vapply(bandeiras, unique, numeric(1)), que diz que esperamos que cada elemento do resultado seja um vetor numérico de tamanho 1. Já que esse não é o caso, VOCÊ VAI VER UM ERRO. Uma vez que você receber o erro, digite ok() para continuar para a próxima pergunta.
  CorrectAnswer: ok()
  AnswerTests: omnitest(correctExpr="ok()")
  Hint: Digite vapply(bandeiras, unique, numeric(1)), então digite ok() para continuar para a próxima questão.

- Class: cmd_question
  Output: Lembre-se da lição anterior, em que sapply(bandeiras, class) vai retornar um vetor de caracteres contendo a classe de cada coluna do dataset. Teste isso novamente para ver o resultado.
  CorrectAnswer: sapply(bandeiras, class)
  AnswerTests: omnitest(correctExpr="sapply(bandeiras, class)")
  Hint: Digite sapply(bandeiras, class) para ter um vetor de caracteres das classes das colunas.

- Class: cmd_question
  Output: Se quisermos explicitar o formato do resultado que esperamos, podemos usar vapply(bandeiras, class, character(1)). O argumento ‘character(1)’ diz ao R que esperamos que a função class() retorne um vetor de caracteres de tamanho 1, quando aplicado a CADA coluna do dataset bandeiras. Teste isso agora
  CorrectAnswer: vapply(bandeiras, class, character(1))
  AnswerTests: omnitest(correctExpr="vapply(bandeiras, class, character(1))")
  Hint: Use vapply(bandeiras, class, character(1)) para retornar um vetor de caracteres das classes das colunas.

- Class: text
  Output: Note que já que nossa expectativa estava correta (character(1)), o resultado do vapply() é identêntico ao do sapply() -- um vetor de caracteres com as classes das colunas.

- Class: text
  Output: Você pode pensar no vapply() como ‘mais seguro’ que sapply(), já que requer que você especifique o formato da saída antes de executar, ao invés de permitir que o R ‘adivinhe’ o que você queria. Além disso, vapply() pode ser mais rápido que sapply() para datasets bastante grandes. Entretanto, quando fazermos análise de dados interativa (no prompt), sapply() economiza digitação e frequentemente vai ser bom o suficiente.

- Class: text
  Output: Como um analista de dados, você frequentemente vai querer dividir seus dados em grupos, baseado no valor de alguma variável, então aplicar uma função aos membros de cada função. A próxima função que iremos investigar, tapply(), faz exatamente isso.

- Class: cmd_question
  Output: Use ?tapply para puxar a documentação.
  CorrectAnswer: ?tapply
  AnswerTests: any_of_exprs('?tapply', 'help(tapply)')
  Hint: Chame a ajuda com ?tapply.

- Class: cmd_question
  Output: A variável ‘landmass’ (continente) no nosso dataset tem valores inteiros entre 1 e 6, cada um representa uma parte diferente do mundo. Use table(bandeiras$landmass) e veja quantas bandeiras/países estão em cada grupo.
  CorrectAnswer: table(bandeiras$landmass)
  AnswerTests: omnitest(correctExpr="table(bandeiras$landmass)")
  Hint: Use table(bandeiras$landmass) para ver quantos países estão em cada grupo.

- Class: cmd_question
  Output: "A variável ‘animate’ (animado) no nosso dataset tem o valor 1 se a bandeira do país contém uma imagem animada (ex.: águia, árvore, mão humana) e 0 se não contiver. Use table(bandeiras$animate) para ver quantas bandeiras contém imagens animadas."
  CorrectAnswer: table(bandeiras$animate)
  AnswerTests: omnitest(correctExpr="table(bandeiras$animate)")
  Hint: Use table(bandeiras$animate) para ver quantas bandeiras contém imagens animadas.

- Class: text
  Output: Isso nos diz que 39 bandeiras contém um objeto animado (animate = 1) e 155 não contém (animate = 0).

- Class: cmd_question
  Output: Se você fizer a média aritimética de 0s e 1s, você terá a proporção de 1s. Use tapply(bandeiras$animate, bandeiras$landmass, mean) para aplicar a função média à variável ‘animate’ separadamente para cada um dos seis grupos em ‘landmass’, portanto nos devolvendo a proporção de bandeiras contendo uma imagem animada EM cada continente.
  CorrectAnswer: tapply(bandeiras$animate, bandeiras$landmass, mean)
  AnswerTests: omnitest(correctExpr="tapply(bandeiras$animate, bandeiras$landmass, mean)")
  Hint: tapply(bandeiras$animate, bandeiras$landmass, mean) nos dará a proporção de bandeiras contendo uma imagem animada em cada continente.

- Class: text
  Output: O primeiro continente (landmass = 1) corresponde à América do Norte e contém a maior proporção de bandeiras com uma imagem animada (0,4194).

- Class: cmd_question
  Output: Similarmente, podemos olhar um sumário de valores de população (arredondado em milhões) para países com e sem a cor vermelho em sua bandeira com tapply(bandeiras$population, bandeiras$red, summary).
  CorrectAnswer: tapply(bandeiras$population, bandeiras$red, summary)
  AnswerTests: omnitest(correctExpr="tapply(bandeiras$population, bandeiras$red, summary)")
  Hint:  Você pode ver um sumário da população para países com e sem a cor vermelho em sua bandeira com tapply(bandeiras$population, bandeiras$red, summary).

- Class: mult_question  
  Output: Qual é a população mediana (em milhões) para países sem a cor vermelha na sua bandeira?
  AnswerChoices: 9.0; 4.0; 27.6; 3.0; 22.1; 0.0
  CorrectAnswer: 3.0
  AnswerTests: omnitest(correctVal= '3.0')
  Hint: Use o resultado da última questão. Lembre-se que red = 0 quer dizer que a cor vermelha não está presente na bandeira daquele país.

- Class: cmd_question
  Output: Finalmente, use a mesma lógica para olhar o sumário de valores de população para cada um dos seis continentes.
  CorrectAnswer: tapply(bandeiras$population, bandeiras$landmass, summary)
  AnswerTests: omnitest(correctExpr="tapply(bandeiras$population, bandeiras$landmass, summary)")
  Hint: Você pode ver um sumário das populações para cada um dos seis continentes chamando tapply() com três argumentos - bandeiras$population, bandeiras$landmass e summary.

- Class: mult_question  
  Output: Qual é a população máxima (em milhões) para o quarto continente (África)?
  AnswerChoices: 56.00; 1010.0; 119.0; 5.00; 157.00
  CorrectAnswer: 56.00
  AnswerTests: omnitest(correctVal= '56.00')
  Hint: Use o resultado da última questão.

- Class: text  
  Output: Nessa lição, você aprendeu a usar vapply() como uma alternativa mais segura a sapply(), o que pode ser útil quando escrever suas próprias funções. Você também aprendeu a usar tapply() para dividir seus dados em grupos baseado no valor de uma variável, então aplicar uma função a cada grupo. Essas funções irão ser úteis na sua saga para se tornar um melhor analista de dados.

- Class: mult_question
  Output: Você gostaria de informar alguém sobre seu sucesso em completar essa lição?
  CorrectAnswer: NULL
  AnswerChoices: Sim; Não
  AnswerTests: notify()
  Hint: NULL
